#!/usr/bin/env python3
import glob
import json

# Note range is exclusive so the last number is not in the list
PUPPET_VERSION = '>= 6.1.0 < 8.0.0'
UNSUPPORTED_EL = {str(i) for i in range(3, 10)}
UNSUPPORTED = {
    'CentOS': UNSUPPORTED_EL,
    'Debian': {str(i) for i in range(3, 12)},
    'Fedora': {str(i) for i in range(3, 41)},
    'OracleLinux': UNSUPPORTED_EL,
    'RedHat': UNSUPPORTED_EL,
    'SLED': {'9', '15'},
    'SLES': {'9', '15.3'},
    'Scientific': UNSUPPORTED_EL,
    'Ubuntu': {str(i) + m for i in range(4, 22) for m in ('.04', '.10')},
}

# Find all metadata.json files in the specified directory structure.
for filename in glob.glob('modules/*/*/metadata.json'):
    print(f'Reading {filename}')

    with open(filename) as fp:
        metadata = json.load(fp)

    updated = False

    # Update Puppet Version Requirement
    for req in metadata.get('requirements', []):
        if req['name'] == 'puppet' and req['version_requirement'] != PUPPET_VERSION:
            req['version_requirement'] = PUPPET_VERSION
            updated = True
            print(f'Updating Puppet version requirement to {PUPPET_VERSION}')

    # Clean Up Unsupported OS and Versions (Safe Logic)
    original_os_support = metadata.get('operatingsystem_support', [])
    new_os_support = []

    # Iterate over each OS entry (e.g., CentOS, Ubuntu).
    for os_entry in original_os_support:
        current_releases = os_entry.get('operatingsystemrelease', [])

        # If an OS entry has no specific releases listed (like 'Archlinux'), keep it unconditionally.
        if not current_releases:
            new_os_support.append(os_entry)
            continue

        # Get the set of unsupported versions for the current OS. Defaults to an empty set if not found.
        unsupported_for_os = UNSUPPORTED.get(os_entry['operatingsystem'], set())

        filtered_releases = [r for r in current_releases if r not in unsupported_for_os]

        if filtered_releases:
            os_entry['operatingsystemrelease'] = filtered_releases
            new_os_support.append(os_entry)
        # If all releases were unsupported, the OS entry is effectively dropped.

        # Log
        removed_releases = set(current_releases) - set(filtered_releases)
        for release in removed_releases:
            print(f"Removing {os_entry['operatingsystem']}-{release}")

    # If the OS list has changed, update the metadata and set the updated flag.
    if original_os_support != new_os_support:
        metadata['operatingsystem_support'] = new_os_support
        updated = True

    if updated:
        print(f'Writing {filename}')
        with open(filename, 'w') as fp:
            # Use indent for readability and ensure_ascii=False for special characters.
            fp.write(json.dumps(metadata, indent=2, ensure_ascii=False) + "\n")
